{"pages":[],"posts":[{"title":"OpenWrt编译记录","text":"OpenWrt作为最为流行的无线路由器系统，其开放，安全，高效的特点广为人知不过在OpenWrt的编译上还是有不少新手掉坑里(也包括我)，所以记录一下我的脱坑历史 1.查看硬件支持情况可以在这个地址查看如果上面没有那么就是OpenWrt官方并未支持，虽然可以移植但是难度较大。我使用的是Netgear WNDR3400 V1，在支持列表内，点击进入支持情况页面，里面可以得到官方编译好的下载链接，如果只是安装那么下载下来根据介绍安装就好，不过我们自然是要自己编译，毕竟这个版本连Lcui都没有。言归正传，修改链接改为http://downloads.openwrt.org/snapshots/trunk/brcm47xx/mips74k/config即可下载到这个机型默认的编译选项设置备用。 2.下载OpenWrt在设备支持页面还可以找到支持这个设备的OpenWrt版本，我这个是14.07版支持，于是 下载14.07版OpenWrt 1git clone git://git.openwrt.org/14.07/openwrt.git 下载15.05版即为： 1git clone git://git.openwrt.org/15.05/openwrt.git 下载最新版为(开发版，不推荐使用)： 1git clone git://git.openwrt.org/openwrt.git 3.配置OpenWrt下载好了之后进入openwrt文件夹，然后运行下面的代码 12./scripts/feeds update -a./scripts/feeds install -a 否则Openwrt只有基本功能，没有WebGUI（Luci）,邮箱，多媒体等然后复制第一布下载的config文件为当前目录下.config文件之后运行 1make menuconfig 会提示一些软件包未安装，安装即可，成功后就会有图形界面的配置选择程序，一般默认配置不用改，根据需要增加Luci，OpenWrt SDK等，最后保存退出。 4.编译OpenWrt由于OpenWrt编译过程中会下载很多软件包，请保持互联网链接 1make V=s -j V=s 选项为输出所有信息，方便定位问题和查看进度（后面编译可以不加，输出信息会少一些）-j 选项为使用与CPU核心数相同的作业数并行编译，提高编译速度。(使用这个偶尔会出现电脑卡死的情况，推荐使用cpu核心数减一的配置，既比如4个核心，就使用-j3) 在编译过程中有的软件包会因为国内特殊的网络环境而下载速度慢或者下载失败，在日志中找到软件包名称和下载链接，使用其他下载手段下载，并放到dl目录可解决。 最后编译完成，在bin目录下有生成好的刷机包可以使用。","link":"/2016/01/24/2016-01-24-openwrt-compile/"},{"title":"小学计算题生成器","text":"帮弟弟做的计算题生成器可以生成100内加减法，选择多项算式则是三项，否则是两项。 多项算式 var result = document.getElementById(\"result\"); var generate = document.getElementById(\"generate\"); var multinomial = document.getElementById(\"multinomial\"); generate.onclick = function(element){ var temp = 0; var arg_one = Math.round(Math.random() * 100) var operator_one = Math.random() > 0.5 ? '+' : '-' if(operator_one == '-'){ arg_two = Math.round(Math.random() * arg_one) temp = arg_one - arg_two; } else { arg_two = Math.round(Math.random() * (100 - arg_one)) temp = arg_one + arg_two; } if(multinomial.checked){ var operator_two = Math.random() > 0.5 ? '+' : '-' if(operator_two == '-'){ arg_three = Math.round(Math.random() * temp) temp = temp - arg_three; } else { arg_three = Math.round(Math.random() * (100 - temp)) temp = temp + arg_three; } if(arg_one","link":"/2018/02/07/2018-02-07-calculation-questions-generator/"},{"title":"Aura UI Framework 浅析","text":"Aura是Salesforce构建的开源UI框架，用于为移动和桌面设备开发动态Web应用程序。 1.1 组件概览图 2.1 前端组件 前端主要功能组件有Component和Controller。 Component是xml格式，类似html，可以包含标准html标签和其他Component。 Controller是js格式，是一个Object里面包含供Component调用的方法。 CSS和标准css一样可以定义component外形。 DOC是组件的描述文档。 除此之外还有：Model, Renderer, Helper, Provider, TestCases等组件 2.2 前端组件的编译 Arua后端服务包含对前端资源的编译，将各种组件编译为标准的html，css和js返回浏览器执行展示。 主要会生成三个js文件，其html包含于js文件中。appcore.js app.js 由服务器端动态生成，inline.js 和 页面html为静态模板，负责加在js和启动其逻辑。 组件编译过程如下： 3.1 后端的执行逻辑 后端代码主要为后端的Controller代码，提供前端组件调用实现后端逻辑。前端组件会写后端Controller的完整包名，然后使用HTTP POST请求的方式传递包名和方法名以及参数，最后后端返回方法的返回值完成RPC调用。 使用@AuraEnabled注解表示可供前端进行RPC调用的方法，在服务启动时扫描通用Controller方法并缓存，在第一次RPC调用时缓存自定义Controller方法。 调用方法的参数和方法的返回值都序列化为JSON数据传输。 4 总结Aura作为一个前后端统一的Web UI框架使用自定义的前端框架和RPC调用实现了一套完整的动态组件解决方法，有很多优势也存在一些问题。 优势： 屏蔽了前后端互交的复杂性，如同想调用一个前端方法一样来调用后端方法。 组件可重用，重用的不仅是组件的前端，后端也可以进行重用。 完善的测试和文档方案，可以写组件的测试代码和文档，提供测试和展示文档的界面和机制。 问题： 由于使用自定义RPC调用，对和其他系统对接造成困难，基本上都需要重新实现代码。 前端组件可以在运行时进行修改和新增，但无法在运行时新增后端Controller，需要其他方案解决。","link":"/2018/08/14/2018-08-14-aura-ui-framework/"},{"title":"Spring Filter 相关问题排查方式","text":"系统上出现单元测试时候无法正常实现过滤器内的逻辑，但是正常运行时候又问题，在Google后没有解决方法，看来只能从源码调试了。 一. 查看所有 Filter Chain断点下到 org.springframework.security.web.FilterChainProxy#FilterChainProxy 就可以在启动后看到所有的 Filter Chain 。 对比正常设想或者环境的不同可以找到问题所在，这里对比正常环境是多了一条 Filter Chian 也就是第一条，那么就可以找到入手点再调试多出来的 Filter Chian 是如何产生的，有没有禁用办法。 二. 定位不一致的 Filter Chain 创建方式上一步调试发现多出来的是 DefaultSecurityFilterChain ，继续下断点到其构造函数，重启查看调用链。 找到构造函数的调用链观察到红色箭头部分是 WebSecurityConfiguration 也就是说这个链是由 SecurityConfigurer 配置来的，跳到对应栈，找到多余的 SecurityConfigurer 为测试类中多加的一个 Security 配置，在分析功能后成功解决问题。","link":"/2019/08/22/2019-08-22-spring-filter-debug/"}],"tags":[{"name":"openwrt","slug":"openwrt","link":"/tags/openwrt/"},{"name":"compile","slug":"compile","link":"/tags/compile/"},{"name":"generator","slug":"generator","link":"/tags/generator/"},{"name":"aura","slug":"aura","link":"/tags/aura/"},{"name":"ui","slug":"ui","link":"/tags/ui/"},{"name":"framework","slug":"framework","link":"/tags/framework/"},{"name":"spring","slug":"spring","link":"/tags/spring/"},{"name":"filter","slug":"filter","link":"/tags/filter/"},{"name":"security","slug":"security","link":"/tags/security/"},{"name":"debug","slug":"debug","link":"/tags/debug/"}],"categories":[{"name":"hobby","slug":"hobby","link":"/categories/hobby/"},{"name":"life","slug":"life","link":"/categories/life/"},{"name":"work","slug":"work","link":"/categories/work/"}]}